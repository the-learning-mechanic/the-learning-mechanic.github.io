[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "Thank you for stopping by. This blog is my way of documenting my journey through the second semester of part 2 of the FastAI: Machine Learning for Coders\nI’ve had a successful career as a product leader and owner at amazing companies like Microsoft, Blackberry, and Lucent. I hold a bachelor’s in Physics and a Master’s in Computer Science. Some of my more notable accomplishments were the first to launch a Garmin GPS-integrated smartphone; the 3600 Curve from Blackberry and the first to launch the 920 Lumia Windows Phone with Microsoft. I’ve had the privilege of supporting product, technical sales and business operations teams leading software and hardware launches. My interest in machine learning started from working with numpy, pandas, and SQLAlchemy as a Developer Evangelist Lead at a Geo-Spatial and Analytics company. My curiosity led me to the courses at FastAI where after a couple of false starts I joined a study group as a way to learn and interact with others who share a similar interest in machine learning. The combination of my fondness for linear algebra and diff equations, accessibility of Python as a language, and last three years working as a Developer Evangelist at a GeoSpatial and Analytics Company is what motivated me to go through the FastAI course."
  },
  {
    "objectID": "posts/Resources and Links/index.html",
    "href": "posts/Resources and Links/index.html",
    "title": "Resources and Links",
    "section": "",
    "text": "I’ll attempt to keep the content and links as current as possible.\n\n\n\nStuttgart City Library\n\n\n\nMachine Learning Resources:\nFastAI\nMeta AI\nHuggingface\nPyTorch\nPapers With Code\nQuarto"
  },
  {
    "objectID": "posts/2023-08-28-learning-rate-finder.html",
    "href": "posts/2023-08-28-learning-rate-finder.html",
    "title": "Learning Rate Finder and Annealing",
    "section": "",
    "text": "Relativaty by MC Escher"
  },
  {
    "objectID": "posts/2023-08-28-learning-rate-finder.html#introduction",
    "href": "posts/2023-08-28-learning-rate-finder.html#introduction",
    "title": "Learning Rate Finder and Annealing",
    "section": "Introduction",
    "text": "Introduction\nSimulated annealing is a global optimization technique that has been widely used in various fields, including physics, chemistry, and engineering. It is particularly useful when dealing with complex systems where traditional optimization methods may fail to converge or produce suboptimal solutions. In machine learning, simulated annealing can be applied to optimize hyperparameters of models, leading to better model performance and generalization.\nIn this article, we will explore how to use simulated annealing in machine learning using FastAI’s libraries. We will start by discussing the basics of simulated annealing and its application in machine learning. Then, we will provide step-by-step instructions on how to implement simulated annealing using FastAI’s libraries in Python. Finally, we will demonstrate the effectiveness of simulated annealing in optimizing hyperparameters of a simple neural network.\nYou can learn more about the amazing work FastAI does in pedogogy of machine learning while makeing signifant contributions to AI at Fast.AI. I encourage you to learn more about what Jeremy is upto and as a current student, join me on this learning journey by goin to Practical Deep Learning for Coders.\n\nWhat is Simulated Annealing?\nSimulated annealing is a stochastic optimization algorithm inspired by the process of annealing in metallurgy. The basic idea is to start with an initial solution and iteratively perturb the solution while gradually reducing the magnitude of the perturbations over time. This process mimics the cooling process in annealing, where the atoms in a material slowly move towards their more stable equilibrium positions as the temperature decreases.\nThe key feature of simulated annealing is the “annealing schedule,” which controls the rate at which the perturbation size is reduced during the optimization process. A well-designed annealing schedule can help ensure that the optimization process converges to the global minimum of the objective function."
  },
  {
    "objectID": "posts/2023-08-28-learning-rate-finder.html#applications-of-simulated-annealing-in-machine-learning",
    "href": "posts/2023-08-28-learning-rate-finder.html#applications-of-simulated-annealing-in-machine-learning",
    "title": "Learning Rate Finder and Annealing",
    "section": "Applications of Simulated Annealing in Machine Learning",
    "text": "Applications of Simulated Annealing in Machine Learning\nSimulated annealing has several applications in machine learning, including:\n\nHyperparameter Optimization\nOne of the most common applications of simulated annealing in machine learning is hyperparameter optimization. Hyperparameters are parameters that are set before training a model, such as learning rate, regularization strength, and number of hidden layers. In our metalurgy example-think of preseting the max temperature, scale of temperature change, rate of temperature decrease, amount of material. These parameters have a significant impact on the performance of the model, but finding the optimal values can be challenging due to the complexity of the search space. Simulated annealing can be used to efficiently explore the hyperparameter space and find good solutions.\n\n\nNeural Network Architecture Search\nAnother application of simulated annealing in machine learning is neural network architecture search. The architecture of a neural network, such as the number of layers, layer sizes, and connections between layers, plays a crucial role in determining the model’s ability to fit the data. Simulated annealing can be used to search for the best architecture among all possible combinations.\n\n\nModel Selection\nSimulated annealing can also be used for model selection, where the goal is to choose the best model from a set of candidate models. Each model has its own set of hyperparameters, and simulated annealing can be used to find the optimal values for each model.\n\n\nSimulated Annealing Algorithms Built into Pytorch\nPyTorch provides several built-in functions for performing annealing during training. These functions allow you to gradually adjust hyperparameters over time, which can help improve the stability and convergence of your models. Some commonly used annealing functions in PyTorch include:\n\ntorch.optim.lr_scheduler.StepLR:\nThis scheduler reduces the learning rate of each parameter group by a factor at each step. You specify the reduction factor and the interval between steps. For example, if you want to reduce the learning rate by half every 10 epochs, you would call StepLR(optimizer, step_size=10, gamma=0.5). ###### torch.optim.lr_scheduler.MultiStepLR:\nSimilar to StepLR, but allows you to specify multiple milestone steps at which the learning rate should be reduced. For example, if you want to reduce the learning rate by half after 10 epochs and then again after 20 epochs, you would call MultiStepLR(optimizer, milestones=[10, 20], gamma=0.5). ###### torch.optim.lr_scheduler.ExponentialLR:\nReduces the learning rate exponentially based on a fixed schedule. You specify the decay rate and the interval between updates. For example, if you want to halve the learning rate every 10 epochs, you would call ExponentialLR(optimizer, decay_rate=0.9, update_interval=10). ##### torch.optim.lr_scheduler.CosineAnnealingLR:\nGradually reduces the learning rate over a specified number of iterations. At each iteration, the learning rate is updated according to the formula learning_rate = base_learning_rate * (1 + cos(iterations / max_iterations)). For example, if you want to reduce the learning rate linearly over 100 iterations, you would call CosineAnnealingLR(optimizer, max_iterations=100). ###### torch.optim.lr_scheduler.ReduceLROnPlateau:\nReduces the learning rate when a metric stops improving. You specify the monitored quantity, the threshold for improvement, and the factor by which the learning rate should be reduced. For example, if you want to reduce the learning rate by half when validation loss fails to improve for 10 consecutive epochs, you would call ReduceLROnPlateau(optimizer, mode=‘min’, factor=0.5, patience=10).\nThese are just a few examples of the annealing functions available in PyTorch. There are also other customizable options, such as torch.optim.lr_scheduler.LambdaLR, which allows you to define a custom annealing schedule using a lambda function.\n\n\n\nHow to Implement Simulated Annealing in FastAI\nThe FastAI framework is highly integrated with the PyTorch library allowing you to incorporate many of the models and functions and learn more about FastAI by going to their documents page.\nStep 1: Install FastAI using the instructions: You can use the FastAI library directly from google Colab or First, choose your go forward method of installation via Git, Conda, or pip:\nFastAI From a jupyter or colab notebook environment you can install them directly by typing: !pip install fastai\nStep 2: Import Libraries We will use NumPy for array operations and FastAI’s optimize library for implementing simulated annealing.\nimport numpy as np\nfrom fastai.optimize import *\nStep 3: Define Objective Function Define the objective function that you want to minimize. For example, let’s consider a simple neural network with one input layer, one output layer, and no hidden layers. The objective function could be the mean squared error (MSE) between the predicted outputs and the true labels.\nclass TrainLearner(Learner):\n    def predict(self): self.preds = self.model(self.batch[0])\n    def get_loss(self): self.loss = self.loss_func(self.preds, self.batch[1])\n    def backward(self): self.loss.backward()\n    def step(self): self.opt.step()\n    def zero_grad(self): self.opt.zero_grad()\nHere, TrainLearner is a custom class that defines the neural network architecture, and predict() and get_loss() are functions that perform forward pass and backward pass through the network, respectively.\nStep 4: Define Annealing Schedule Next, define the annealing schedule. The annealing schedule should specify the starting temperature, ending temperature, and the reduction factor for each iteration. Here’s an example:\nstart_temp = 1000\nend_temp = 1e-6\nreduction_factor = 0.95\nschedule = np.linspace(start_temp, end_temp, num_iterations) ** reduction_factor\nThis schedule starts with a high temperature (start_temp) and reduces it exponentially until reaching a low temperature (end_temp). The reduction factor (reduction_factor) controls the rate at which the temperature is reduced.\nStep 5: Run Simulated Annealing Finally, run the simulated annealing algorithm. Here’s some sample code:"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The Learning Mechanic",
    "section": "",
    "text": "Cosine Annealing With a FastAI Learner\n\n\n\n\n\nImplementing a Cosine Annealer with the FastAI learner\n\n\n\n\n\n\nSep 5, 2023\n\n\nManuel Pardo\n\n\n\n\n\n\n  \n\n\n\n\nResources and Links\n\n\n\n\n\n\n\nnews\n\n\n\n\n\n\n\n\n\n\n\nAug 30, 2023\n\n\nManuel Pardo\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/2023-08-28- FastAI Cosine Annealer.html",
    "href": "posts/2023-08-28- FastAI Cosine Annealer.html",
    "title": "Cosine Annealing With a FastAI Learner",
    "section": "",
    "text": "Relativity by MC Escher"
  },
  {
    "objectID": "posts/2023-08-28- FastAI Cosine Annealer.html#cosine-annealing",
    "href": "posts/2023-08-28- FastAI Cosine Annealer.html#cosine-annealing",
    "title": "Cosine Annealing With a FastAI Learner",
    "section": "Cosine Annealing",
    "text": "Cosine Annealing\nOne popular variant of simulated annealing is cosine annealing. Instead of decreasing the learning rate linearly over time, cosine annealing uses a cosine function to gradually reduce the learning rate. This allows the model to slow down its descent into the optimum and helps prevent getting stuck in local minima.\nHere’s the formula for cosine annealing:\n\\[\nCurrentLF = StartingRate * (Maxixum(cos(pi * (1 - CurrentSteps/TotalSteps)))\n\\]\nwhere StartingRate is the initial learning rate, CurrentLF is the learning rate calcuated at the CurrentSteps, and TotalSteps is the total number of steps."
  },
  {
    "objectID": "posts/2023-08-28- FastAI Cosine Annealer.html#implementing-cosine-annealing-in-fastai",
    "href": "posts/2023-08-28- FastAI Cosine Annealer.html#implementing-cosine-annealing-in-fastai",
    "title": "Cosine Annealing With a FastAI Learner",
    "section": "Implementing Cosine Annealing in FastAI",
    "text": "Implementing Cosine Annealing in FastAI\nTo incorporate cosine annealing into our FastAI workflow, we’ll extend the LRFinder class and add a new method called cosine_annealing. Here’s the updated code:\nclass LRFinderCB(Callback):\n    def __init__(self, lr_mult=1.3):\n        super().__init__()\n        self.lr_mult = lr_mult\n        self.cosine_annealing = False \n\n    def before_fit(self, learner):\n        self.lrs, self.losses = [], []\n        self.min = math.inf\n\n    def after_batch(self, learner):\n        if not learner.training:\n            raise CancelEpochException()\n\n        self.lrs.append(learner.opt.param_groups[0]['lr'])\n        loss = to_cpu(learner.loss)\n        self.losses.append(loss)\n        if loss &lt; self.min:\n            self.min = loss\n\n        if self.cosine_annealing:\n            learning_rate = self.lr_mult * max(cos(pi * (1 - len(self.lrs) / len(self.losses))), 0.5)\n            for g in learner.opt.param_groups:\n                g['lr'] = learning_rate\n\nclass Metric:\n    def __init__(self):\n        self.reset()\n\n    def reset(self):\n        self.vals, self.ns = [], []\n\n    def add(self, inp, targ=None, n=1):\n        self.last = self.calc(inp, targ)\n        self.vals.append(self.last)\n        self.ns.append(n)\n\n    @property\n    def value(self):\n        ns = tensor(self.ns)\n        return (tensor(self.vals) * ns).sum() / ns.sum()\n\n    def calc(self, inps, targs):\n        return (inps == targs).float().mean()\n\nclass Accuracy(Metric):\n    def calc(self, inps, targs):\n        return (inps == targs).float().mean()\nNow, when we initialize the LRFinderCB object, we can pass cosine_annealing=True to enable cosine annealing. The cosine_annealing method will update the learning rate according to the cosine annealing formula."
  },
  {
    "objectID": "posts/2023-08-28- FastAI Cosine Annealer.html#using-the-metric-class-to-calculate-accuracy",
    "href": "posts/2023-08-28- FastAI Cosine Annealer.html#using-the-metric-class-to-calculate-accuracy",
    "title": "Cosine Annealing With a FastAI Learner",
    "section": "Using the Metric Class to Calculate Accuracy",
    "text": "Using the Metric Class to Calculate Accuracy\nTo calculate accuracy during training, we can use the Metric class provided by FastAI. This class allows us to compute a metric over a dataset and print it out at each epoch.\nWe’ll create a custom accuracy metric that calculates the accuracy of our model on the validation set. Here’s how to do it:\nfrom fastai import metrics\nclass Accuracy(metrics.Metric):\n    def __init__(self):\n        super().__init__()\n        self.correct = 0\n        self.total = 0\n\n    def add(self, pred, true):\n        self.correct += (pred == true).sum().item()\n        self.total += pred.size(0)\n\n    def value(self):\n        return self.correct / self.total\nThis metric class takes in two tensors, pred and true, which represent the predicted outputs and the true labels, respectively. It then computes the accuracy by counting the number of correctly predicted samples and dividing it by the total number of samples.\nWe can now register this metric with FastAI’s CallbackList to get the accuracy at each epoch:\nfrom fastai.callbacks import CallbackList\n\ncb_list = CallbackList()\ncb_list.insert(Accuracy())\nWith this callback list, FastAI will call the Accuracy metric at each epoch and print out the accuracy."
  },
  {
    "objectID": "posts/2023-08-28- FastAI Cosine Annealer.html#putting-everything-together",
    "href": "posts/2023-08-28- FastAI Cosine Annealer.html#putting-everything-together",
    "title": "Cosine Annealing With a FastAI Learner",
    "section": "Putting Everything Together",
    "text": "Putting Everything Together\nNow that we have all the necessary components, let’s put them together to create a complete FastAI training loop with cosine annealing and accuracy calculation:\nfrom fastai import TrainLoop\n\ntrain_loop = TrainLoop(model=model,\n                     dataloader=dataloader,\n                     optimizer=optimizer,\n                     loss_fn=loss_fn,\n                     metrics=[Accuracy()],\n                     callbacks=[cb_list],\n                     device=\"cuda\")\ntrain_loop.train(num_epochs=10)\nThis training loop will train the model for 10 epochs, computing the accuracy at each epoch using the Accuracy metric and updating the learning rate using cosine annealing.\nAnd that’s it! With these few lines of code, you’ve implemented a powerful training loop that leverages the flexibility and ease of use of FastAI.\nConclusion In this tutorial, we learned how to implement cosine annealing and accuracy calculation in a FastAI training loop. By extending the LRFinder class and creating a custom Accuracy metric, we were able to create a complete training loop that adapts the learning rate during training and prints out the accuracy at each epoch.\nWith this knowledge, you can now apply these techniques to your own deep learning projects and improve the performance of your models. Happy coding!"
  },
  {
    "objectID": "posts/2023-08-28- FastAI Cosine Annealer.html#conclusion",
    "href": "posts/2023-08-28- FastAI Cosine Annealer.html#conclusion",
    "title": "Cosine Annealing With a FastAI Learner",
    "section": "Conclusion",
    "text": "Conclusion\nIn this tutorial, we learned how to implement cosine annealing and accuracy calculation in a FastAI training loop. By extending the LRFinder class and creating a custom Accuracy metric, we were able to create a complete training loop that adapts the learning rate during training and prints out the accuracy at each epoch.\nWith this knowledge, you can now apply these techniques to your own deep learning projects and improve the performance of your models. Happy coding!"
  }
]